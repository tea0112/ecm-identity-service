version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: ecm-identity-postgres
    environment:
      POSTGRES_DB: ecm_identity
      POSTGRES_USER: ecm_user
      POSTGRES_PASSWORD: ecm_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/main/resources/db/migration:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecm_user -d ecm_identity"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecm-network

  redis:
    image: redis:7-alpine
    container_name: ecm-identity-redis
    command: redis-server --requirepass ecm_redis_password
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecm-network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecm-identity-app
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/ecm_identity
      SPRING_DATASOURCE_USERNAME: ecm_user
      SPRING_DATASOURCE_PASSWORD: ecm_password
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PASSWORD: ecm_redis_password
      ECM_SECURITY_JWT_SECRET: your-256-bit-secret-key-here-change-in-production
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ecm-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  prometheus:
    image: prom/prometheus:latest
    container_name: ecm-identity-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ecm-network

  grafana:
    image: grafana/grafana:latest
    container_name: ecm-identity-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - ecm-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ecm-network:
    driver: bridge
